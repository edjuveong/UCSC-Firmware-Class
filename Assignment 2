Total Hours Spent: 5.0/1.5
		   Actual/Expect

4357 Embedded Firmware Essentials
- Program Assignment #2

1. Login to mbed web site, export the "Hello World" program to all of the following targets. 
   How many text files and how many lines of text code in the exported offline code package? 
   
   I exported the hello world program that generated the following list of file & folders for the different offline tools:
   
   For  uVision:
   
           .hg (folder/directory)
           mbed (folder/directory)
           .hgignore
           HelloWorld.uvopt
           HelloWorld.uvproj
           main.cpp
           mbed.bld
           
    For GCC ARM Embedded:
    
           .hg (folder/directory)
           mbed (folder/directory)
           .hgignore
           Makefile
           main.cpp
           mbed.bld          
        
   
   uVision - There were two project related files that gives instruction for building: HelloWorld.uvopt and
             HelloWorld.uvproj (project file). Also, in the MBED folder there is a script file LPC1768
             
             There were 200 lines of text code in HelloWorld.uvopt
             There were 423 lines of text code in HelloWorld.uvproj
             
   GCC ARM Embedded - There was only one text file: Makefile (shown below) that is used to give instruction for the build.
   As per below (space in between lines included) there were lines of 56 text code in the make file.  
   
# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

GCC_BIN = 
PROJECT = HelloWorld
OBJECTS = ./main.o 
SYS_OBJECTS = ./mbed/LPC1768/GCC_ARM/core_cm3.o ./mbed/LPC1768/GCC_ARM/cmsis_nvic.o ./mbed/LPC1768/GCC_ARM/system_LPC17xx.o ./mbed/LPC1768/GCC_ARM/startup_LPC17xx.o 
INCLUDE_PATHS = -I. -I./mbed -I./mbed/LPC1768 -I./mbed/LPC1768/GCC_ARM 
LIBRARY_PATHS = -L./mbed/LPC1768/GCC_ARM 
LIBRARIES = -lcapi -lmbed 
LINKER_SCRIPT = ./mbed/LPC1768/GCC_ARM/LPC1768.ld

############################################################################### 
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy

CPU = -mcpu=cortex-m3 -mthumb
CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -fno-exceptions -ffunction-sections -fdata-sections 
CC_FLAGS += -MMD -MP
CC_SYMBOLS = -DTARGET_LPC1768 -DTARGET_M3 -DTARGET_NXP -DTARGET_LPC176X -DTARGET_MBED_LPC1768 -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -D__CORTEX_M3 -DARM_MATH_CM3 -DMBED_BUILD_TIMESTAMP=1413157701.15 -D__MBED__=1 

LD_FLAGS = -mcpu=cortex-m3 -mthumb -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

ifeq ($(DEBUG), 1)
  CC_FLAGS += -DDEBUG -O0
else
  CC_FLAGS += -DNDEBUG -Os
endif

all: $(PROJECT).bin

clean:
	rm -f $(PROJECT).bin $(PROJECT).elf $(OBJECTS) $(DEPS)

.s.o:
	$(AS) $(CPU) -o $@ $<

.c.o:
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

.cpp.o:
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 $(INCLUDE_PATHS) -o $@ $<


$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) -O binary $< $@

DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
-include $(DEPS)
   
   
   
   How many binary (library or object) files?
   
   uVision-Library path is embed/LPC1768/ARM there were 5 object files (*.0)
   GCC ARM Embedded- Library path is embed/LPC1768/GCC_ARM there were 4 object files (*.o)  
   
   How many files are different between (a) and (b)? (Use linux commands: find, wc, diff) (10 points)
   
   The uVision has more files as compared to GCC ARM. At the main directory, it has HelloWorld.uvopt and
   HelloWorld.uvproj for the instruction build while GCC ARM only has the Makefile
             
   For the library path: uVision has one additional object file called sys.o that was not in GCC ARM
   
   Also, in the library path for uVision it has differnt files called: capi.ar, LPC1768 (windos script), and mbed.ar 
   
   For the library path of GCC ARM it has the different files called: libcapi.a and libmbed.a
   
   What is the "Entry point address:" of your program?  (hint: using readelf) 
   
   Below is the top portion section of result from readelf command for the object file startup_LPC17xx.o in GCC & uvision  
   
   ELF Header:
Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
Class: ELF32
Data: 2's complement, little endian
Version: 1 (current)
OS/ABI: UNIX - System V
ABI Version: 0
Type: REL (Relocatable file)
Machine: ARM
Version: 0x1
Entry point address: 0x0
Start of program headers: 0 (bytes into file)
Start of section headers: 780 (bytes into file)
Flags: 0x5000000, Version5 EABI
Size of this header: 52 (bytes)
Size of program headers: 0 (bytes)
Number of program headers: 0
Size of section headers: 40 (bytes)
Number of section headers: 13
Section header string table index: 10

The entry point address showed is at 0x0 for both the GCC and uVision
 
   uVision- program counter starts at 0000
   GCC ARM Embedded- program counter starts at 0000
   
2. binwalk, objdump, nm to Analysis binaries files
   http://binwalk.org/

Using Linux terminal I did an object file dump command on the obj file startup_LPC17xx.o

Terminal command: objdump â€“x startup_LPC17xx.o, this hows all header information of object file (pls. see below)

startup_LPC17xx.o
architecture: UNKNOWN!, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 RESET         000000c4  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  1 .ARM.__at_0x02FC 00000004  00000000  00000000  00000250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000024  00000000  00000000  00000254  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  3 .debug_frame  000000e4  00000000  00000000  00000288  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .comment      0000011c  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY
  5 .ARM.attributes 0000003e  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    df *ABS*    00000000 /home/emimon01/smb/work/mbed/emilmont/cmsis/LPC1768/ARM/startup_LPC17xx.s
00000000 l       .ARM.__at_0x02FC    00000000 $d
00000000 l       .text    00000000 $t
0000001c l       .text    00000000 $d
00000000 l    d  .ARM.__at_0x02FC    00000004 .ARM.__at_0x02FC
00000000 l    d  .debug_frame    000000e4 .debug_frame
00000000 l    d  .text    00000024 .text
00000000 l    d  RESET    000000c4 RESET
00000000 l       *ABS*    00000000 BuildAttributes$$THM_ISAv4$P$D$K$B$S$PE$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$USESV6$~STKCKD$USESV7$~SHL$OSPACE$EBA8$PRES8$EABIv2
00000000 g     O RESET    00000004 .hidden __Vectors
00000000         *UND*    00000000 .hidden SystemInit
00000000         *UND*    00000000 .hidden __main
00000001  w    F .text    00000008 .hidden Reset_Handler
00000009  w    F .text    00000002 .hidden NMI_Handler
0000000b  w    F .text    00000002 .hidden HardFault_Handler
0000000d  w    F .text    00000002 .hidden MemManage_Handler
0000000f  w    F .text    00000002 .hidden BusFault_Handler
00000011  w    F .text    00000002 .hidden UsageFault_Handler
00000013  w    F .text    00000002 .hidden SVC_Handler
00000015  w    F .text    00000002 .hidden DebugMon_Handler
00000017  w    F .text    00000002 .hidden PendSV_Handler
00000019  w    F .text    00000002 .hidden SysTick_Handler
0000001b  w    F .text    00000000 .hidden ADC_IRQHandler
0000001b  w    F .text    00000000 .hidden BOD_IRQHandler
0000001b  w    F .text    00000000 .hidden CAN_IRQHandler
0000001b  w    F .text    00000000 .hidden DMA_IRQHandler
0000001b  w    F .text    00000000 .hidden EINT0_IRQHandler
0000001b  w    F .text    00000000 .hidden EINT1_IRQHandler
0000001b  w    F .text    00000000 .hidden EINT2_IRQHandler
0000001b  w    F .text    00000000 .hidden EINT3_IRQHandler
0000001b  w    F .text    00000000 .hidden ENET_IRQHandler
0000001b  w    F .text    00000000 .hidden I2C0_IRQHandler
0000001b  w    F .text    00000000 .hidden I2C1_IRQHandler
0000001b  w    F .text    00000000 .hidden I2C2_IRQHandler
0000001b  w    F .text    00000000 .hidden I2S_IRQHandler
0000001b  w    F .text    00000000 .hidden MCPWM_IRQHandler
0000001b  w    F .text    00000000 .hidden PLL0_IRQHandler
0000001b  w    F .text    00000000 .hidden PLL1_IRQHandler
0000001b  w    F .text    00000000 .hidden PWM1_IRQHandler
0000001b  w    F .text    00000000 .hidden QEI_IRQHandler
0000001b  w    F .text    00000000 .hidden RIT_IRQHandler
0000001b  w    F .text    00000000 .hidden RTC_IRQHandler
0000001b  w    F .text    00000000 .hidden SPI_IRQHandler
0000001b  w    F .text    00000000 .hidden SSP0_IRQHandler
0000001b  w    F .text    00000000 .hidden SSP1_IRQHandler
0000001b  w    F .text    00000000 .hidden TIMER0_IRQHandler
0000001b  w    F .text    00000000 .hidden TIMER1_IRQHandler
0000001b  w    F .text    00000000 .hidden TIMER2_IRQHandler
0000001b  w    F .text    00000000 .hidden TIMER3_IRQHandler
0000001b  w    F .text    00000000 .hidden UART0_IRQHandler
0000001b  w    F .text    00000000 .hidden UART1_IRQHandler
0000001b  w    F .text    00000000 .hidden UART2_IRQHandler
0000001b  w    F .text    00000000 .hidden UART3_IRQHandler
0000001b  w    F .text    00000000 .hidden USB_IRQHandler
0000001b  w    F .text    00000000 .hidden WDT_IRQHandler


RELOCATION RECORDS FOR [RESET]:
OFFSET   TYPE              VALUE 
00000004 UNKNOWN           Reset_Handler
00000008 UNKNOWN           NMI_Handler
0000000c UNKNOWN           HardFault_Handler
00000010 UNKNOWN           MemManage_Handler
00000014 UNKNOWN           BusFault_Handler
00000018 UNKNOWN           UsageFault_Handler
0000002c UNKNOWN           SVC_Handler
00000030 UNKNOWN           DebugMon_Handler
00000038 UNKNOWN           PendSV_Handler
0000003c UNKNOWN           SysTick_Handler
00000040 UNKNOWN           WDT_IRQHandler
00000044 UNKNOWN           TIMER0_IRQHandler
00000048 UNKNOWN           TIMER1_IRQHandler
0000004c UNKNOWN           TIMER2_IRQHandler
00000050 UNKNOWN           TIMER3_IRQHandler
00000054 UNKNOWN           UART0_IRQHandler
00000058 UNKNOWN           UART1_IRQHandler
0000005c UNKNOWN           UART2_IRQHandler
00000060 UNKNOWN           UART3_IRQHandler
00000064 UNKNOWN           PWM1_IRQHandler
00000068 UNKNOWN           I2C0_IRQHandler
0000006c UNKNOWN           I2C1_IRQHandler
00000070 UNKNOWN           I2C2_IRQHandler
00000074 UNKNOWN           SPI_IRQHandler
00000078 UNKNOWN           SSP0_IRQHandler
0000007c UNKNOWN           SSP1_IRQHandler
00000080 UNKNOWN           PLL0_IRQHandler
00000084 UNKNOWN           RTC_IRQHandler
00000088 UNKNOWN           EINT0_IRQHandler
0000008c UNKNOWN           EINT1_IRQHandler
00000090 UNKNOWN           EINT2_IRQHandler
00000094 UNKNOWN           EINT3_IRQHandler
00000098 UNKNOWN           ADC_IRQHandler
0000009c UNKNOWN           BOD_IRQHandler
000000a0 UNKNOWN           USB_IRQHandler
000000a4 UNKNOWN           CAN_IRQHandler
000000a8 UNKNOWN           DMA_IRQHandler
000000ac UNKNOWN           I2S_IRQHandler
000000b0 UNKNOWN           ENET_IRQHandler
000000b4 UNKNOWN           RIT_IRQHandler
000000b8 UNKNOWN           MCPWM_IRQHandler
000000bc UNKNOWN           QEI_IRQHandler
000000c0 UNKNOWN           PLL1_IRQHandler


RELOCATION RECORDS FOR [.text]:
OFFSET   TYPE              VALUE 
0000001c UNKNOWN           SystemInit
00000020 UNKNOWN           __main


RELOCATION RECORDS FOR [.debug_frame]:
OFFSET   TYPE              VALUE 
00000038 UNKNOWN           .debug_frame
0000003c UNKNOWN           .text
00000048 UNKNOWN           .debug_frame
0000004c UNKNOWN           .text
00000058 UNKNOWN           .debug_frame
0000005c UNKNOWN           .text
00000068 UNKNOWN           .debug_frame
0000006c UNKNOWN           .text
00000078 UNKNOWN           .debug_frame
0000007c UNKNOWN           .text
00000088 UNKNOWN           .debug_frame
0000008c UNKNOWN           .text
00000098 UNKNOWN           .debug_frame
0000009c UNKNOWN           .text
000000a8 UNKNOWN           .debug_frame
000000ac UNKNOWN           .text
000000b8 UNKNOWN           .debug_frame
000000bc UNKNOWN           .text
000000c8 UNKNOWN           .debug_frame
000000cc UNKNOWN           .text
000000d8 UNKNOWN           .debug_frame
000000dc UNKNOWN           .text

Also, I did an nm command on the same file and results are as shown below.

Terminal command: nm â€“a startup_LPC17xx.o
>> shows all symbols in the object file


0000001b W ADC_IRQHandler
00000000 t .ARM.__at_0x02FC
0000001b W BOD_IRQHandler
00000000 a BuildAttributes$$THM_ISAv4$P$D$K$B$S$PE$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$USESV6$~STKCKD$USESV7$~SHL$OSPACE$EBA8$PRES8$EABIv2
0000000f W BusFault_Handler
0000001b W CAN_IRQHandler
00000000 t $d
0000001c t $d
00000000 N .debug_frame
00000015 W DebugMon_Handler
0000001b W DMA_IRQHandler
0000001b W EINT0_IRQHandler
0000001b W EINT1_IRQHandler
0000001b W EINT2_IRQHandler
0000001b W EINT3_IRQHandler
0000001b W ENET_IRQHandler
0000000b W HardFault_Handler
00000000 a /home/emimon01/smb/work/mbed/emilmont/cmsis/LPC1768/ARM/startup_LPC17xx.s
0000001b W I2C0_IRQHandler
0000001b W I2C1_IRQHandler
0000001b W I2C2_IRQHandler
0000001b W I2S_IRQHandler
         U __main
0000001b W MCPWM_IRQHandler
0000000d W MemManage_Handler
00000009 W NMI_Handler
00000017 W PendSV_Handler
0000001b W PLL0_IRQHandler
0000001b W PLL1_IRQHandler
0000001b W PWM1_IRQHandler
0000001b W QEI_IRQHandler
00000000 r RESET
00000001 W Reset_Handler
0000001b W RIT_IRQHandler
0000001b W RTC_IRQHandler
0000001b W SPI_IRQHandler
0000001b W SSP0_IRQHandler
0000001b W SSP1_IRQHandler
00000013 W SVC_Handler
         U SystemInit
00000019 W SysTick_Handler
00000000 t $t
00000000 t .text
0000001b W TIMER0_IRQHandler
0000001b W TIMER1_IRQHandler
0000001b W TIMER2_IRQHandler
0000001b W TIMER3_IRQHandler
0000001b W UART0_IRQHandler
0000001b W UART1_IRQHandler
0000001b W UART2_IRQHandler
0000001b W UART3_IRQHandler
00000011 W UsageFault_Handler
0000001b W USB_IRQHandler
00000000 R __Vectors
0000001b W WDT_IRQHandler

 I did online compilation of HelloWorld to geberate the HellowWorld.bin file and tried to use some of the tools for analysis.

 Binwalk is a firmware analysis tool that looks at the header signature.
 It runs in Linux and written in Python.

 I uploaded the binwalk software and other supporting files but was not succesful in making this to work.
 
 However, I did find other firmware image analysis tool that I tried called HxDHex editor.
 It allowed me to open the .bin file and convert to hex for analysis.
 
 I upload the pdf file of the hex file generated per below google drive link. The file name is HelloworldHex.pdf
 https://drive.google.com/#folders/0BysRu65JD_l8czdZYVhJcUUtQzA
 
 THe bin file analys of MBED hello world was made using that tool. 
 
3. Optional: git clone https://github.com/mbedmicro/mbed

 I did try to read another bin file by compiling a modified version of HekllowWorld and I cal this file Try01
 Here is the program listing:
 
#include "mbed.h"

DigitalOut myled(LED2);

int main() {
    while(1) {
        myled = 1;
        wait(4.0);
        myled = 0;
        wait(4.0);
    }
}

I then uploaded the pdf file of the hex file generated per below google drive link. The file nane is Try01Hex.pdf 
 https://drive.google.com/#folders/0BysRu65JD_l8czdZYVhJcUUtQzA
